// Generated by gencpp from file ex1_serial/Telemetry.msg
// DO NOT EDIT!


#ifndef EX1_SERIAL_MESSAGE_TELEMETRY_H
#define EX1_SERIAL_MESSAGE_TELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ex1_serial
{
template <class ContainerAllocator>
struct Telemetry_
{
  typedef Telemetry_<ContainerAllocator> Type;

  Telemetry_()
    : id(0)
    , cmd(0)
    , len(0)
    , opt(0.0)  {
    }
  Telemetry_(const ContainerAllocator& _alloc)
    : id(0)
    , cmd(0)
    , len(0)
    , opt(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _id_type;
  _id_type id;

   typedef uint8_t _cmd_type;
  _cmd_type cmd;

   typedef uint8_t _len_type;
  _len_type len;

   typedef float _opt_type;
  _opt_type opt;





  typedef boost::shared_ptr< ::ex1_serial::Telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ex1_serial::Telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct Telemetry_

typedef ::ex1_serial::Telemetry_<std::allocator<void> > Telemetry;

typedef boost::shared_ptr< ::ex1_serial::Telemetry > TelemetryPtr;
typedef boost::shared_ptr< ::ex1_serial::Telemetry const> TelemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ex1_serial::Telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ex1_serial::Telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ex1_serial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ex1_serial': ['/home/rovertx2/HERO_EX1/src/ex1_serial/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ex1_serial::Telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex1_serial::Telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex1_serial::Telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex1_serial::Telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex1_serial::Telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex1_serial::Telemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ex1_serial::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "223bde042d75b50cc1fe2380be06acc7";
  }

  static const char* value(const ::ex1_serial::Telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x223bde042d75b50cULL;
  static const uint64_t static_value2 = 0xc1fe2380be06acc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ex1_serial::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ex1_serial/Telemetry";
  }

  static const char* value(const ::ex1_serial::Telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ex1_serial::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Custom data type for telemetry messages. \n"
"uint16 id\n"
"uint8 cmd\n"
"uint8 len \n"
"float32 opt \n"
;
  }

  static const char* value(const ::ex1_serial::Telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ex1_serial::Telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.cmd);
      stream.next(m.len);
      stream.next(m.opt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ex1_serial::Telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ex1_serial::Telemetry_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "len: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.len);
    s << indent << "opt: ";
    Printer<float>::stream(s, indent + "  ", v.opt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EX1_SERIAL_MESSAGE_TELEMETRY_H
